version: '2'

services:

  iohint-rabbitmq:
    image: rabbitmq:3.6
    container_name: iohint_iohint-rabbitmq # prevent scale>1 intentionally
    # rabbitmq uses the hostname to store files in its data directory.  I've
    # added a static hostname here so that an rm, create, and start doesn't
    # end up losing the data present in the RabbitMQ server.
    hostname: iohint-rabbitmq

  iohint-pgsql:
    image: docker.citr.ous.ca/postgres-wale:latest
    container_name: iohint_iohint-pgsql # prevent scale>1 intentionally
    environment:
      POSTGRES_USER: iohint
      POSTGRES_DB: iohint
      PGUSER: iohint # for wal-e to access db with psql

  iohint-celery-worker:
    image: docker.citr.ous.ca/iohint-celery-worker:latest
    depends_on:
      - iohint-rabbitmq
      - iohint-pgsql
    environment:
      SECRET_KEY: my-secret-key
      DATABASE_URL: postgres://iohint@iohint-pgsql:5432/iohint
      CELERY_BROKER_URL: amqp://guest:guest@iohint-rabbitmq:5672//

  iohint-celery-beat:
    image: docker.citr.ous.ca/iohint-celery-beat:latest
    container_name: iohint_iohint-celery-beat # prevent scale>1 intentionally
    depends_on:
      - iohint-rabbitmq
      - iohint-pgsql
    # celery beat w/ django backend crashes immediately if pgsql is not
    # available, which might happen during docker-compose up if
    # iohint-pgsql is not yet ready.  Simple solution for now is to just
    # set a restart policy.  Can't use on-failure, because celery doesn't
    # even fail with a non-zero exit code.
    restart: unless-stopped
    environment:
      SECRET_KEY: my-secret-key
      DATABASE_URL: postgres://iohint@iohint-pgsql:5432/iohint
      CELERY_BROKER_URL: amqp://guest:guest@iohint-rabbitmq:5672//
